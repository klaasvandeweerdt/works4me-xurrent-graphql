using System;
using System.Collections.Generic;
using System.Diagnostics;
using Works4me.Xurrent.GraphQL.Attributes;
using Works4me.Xurrent.GraphQL.Builders;

namespace Works4me.Xurrent.GraphQL
{
    /// <summary>
    /// Represent a <see href="https://developer.xurrent.com/graphql/object/note/">Note</see> in Xurrent.
    /// </summary>
    [DebuggerDisplay("{Id}")]
    [XurrentEntity("Note")]
    public sealed class Note : IDataItem, INode
    {
        /// <summary>
        /// The account.
        /// </summary>
        [XurrentField("account")]
        public Account? Account { get; internal set; }

        /// <summary>
        /// The date and time at which the note was created.
        /// </summary>
        [XurrentField("createdAt")]
        public DateTime? CreatedAt { get; internal set; }

        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        [XurrentField("id", IsDefaultQueryProperty = true)]
        public string Id { get; internal set; } = string.Empty;

        /// <summary>
        /// The inbound email from which the note was created.
        /// </summary>
        [XurrentField("inboundEmail")]
        public InboundEmail? InboundEmail { get; internal set; }

        /// <summary>
        /// Whether the notes is internal or not.
        /// </summary>
        [XurrentField("internal")]
        public bool? Internal { get; internal set; }

        /// <summary>
        /// The medium used to add the note. Valid values are:<br />
        ///   • <c>default</c>: the note was manually added by a person, or automatically using the REST, Import or GraphQL API.<br />
        ///   • <c>email</c>: the note was added by the Mail API.<br />
        ///   • <c>outbound_email</c>: the note was created via the "Send Email" action.<br />
        ///   • <c>system</c>: the note was generated by the system.<br />
        ///   • <c>redacted</c>: the note was deleted by an account administrator.<br />
        ///   • <c>automation</c>: the note was added by an automation rule.<br />
        /// </summary>
        [XurrentField("medium")]
        public NoteMedium? Medium { get; internal set; }

        [XurrentField("noteReactions")]
        internal PagedResponse<NoteReaction>? NoteReactionsCollection { get; set; }
        /// <summary>
        /// The note reactions belonging to this note.
        /// </summary>
        public ReadOnlyDataCollection<NoteReaction>? NoteReactions { get => NoteReactionsCollection?.Data is null ? null : new ReadOnlyDataCollection<NoteReaction>(NoteReactionsCollection.Data); }

        /// <summary>
        /// Person who added this note.
        /// </summary>
        [XurrentField("person")]
        public Person? Person { get; internal set; }

        /// <summary>
        /// Text of this note.
        /// </summary>
        [XurrentField("text")]
        public string? Text { get; internal set; }

        [XurrentField("textAttachments")]
        internal PagedResponse<Attachment>? TextAttachmentsCollection { get; set; }
        /// <summary>
        /// Files and inline images linked to the Text field.
        /// </summary>
        public ReadOnlyDataCollection<Attachment>? TextAttachments { get => TextAttachmentsCollection?.Data is null ? null : new ReadOnlyDataCollection<Attachment>(TextAttachmentsCollection.Data); }

        /// <summary>
        /// Visibility of this note.
        /// </summary>
        [XurrentField("visibility")]
        public NoteVisibility? Visibility { get; internal set; }

        /// <summary>
        /// <br>Returns a key used internally for merging paged or partial data responses within a <see cref="DataCollection{T}"/>.</br>
        /// <br>This key is not guaranteed to be unique outside the context of merging and should not be relied upon as a business identifier.</br>
        /// </summary>
        string IDataItem.GetMergeKey()
        {
            return Id;
        }

        /// <summary>
        /// <br>Merges connection data from the specified <paramref name="data"/> item into the current item.</br>
        /// <br>This method is intended for consolidating partial or paged results received from multiple responses.</br>
        /// </summary>
        /// <param name="data">The <see cref="IDataItem"/> instance whose connection data should be merged into the current item.</param>
        void IDataItem.MergeConnectionData(IDataItem data)
        {
            if (data is Note note)
            {
                NoteReactionsCollection?.Data?.AddRange(note.NoteReactions);
                TextAttachmentsCollection?.Data?.AddRange(note.TextAttachments);
            }
        }

        /// <summary>
        /// <br>Returns an enumerable collection of <see cref="ExecutionPageInfo"/> objects describing the pagination state for this item and its children at the specified depth.</br>
        /// <br>This is used to track paging information when working with nested or related data collections.</br>
        /// </summary>
        /// <param name="depth">The maximum recursion depth for retrieving page information.</param>
        IEnumerable<ExecutionPageInfo> IDataItem.GetPageInfo(int depth)
        {
            if (NoteReactionsCollection is not null)
                foreach (ExecutionPageInfo pageInfo in NoteReactionsCollection.GetPageInfo("noteReactions", depth))
                    yield return pageInfo;

            if (TextAttachmentsCollection is not null)
                foreach (ExecutionPageInfo pageInfo in TextAttachmentsCollection.GetPageInfo("textAttachments", depth))
                    yield return pageInfo;
        }
    }
}
